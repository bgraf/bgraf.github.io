<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bg</title>
    <link>https://bgraf.github.io/</link>
    <description>Recent content on bg</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© bg 2024</copyright>
    <lastBuildDate>Sat, 04 Oct 2025 13:19:42 +0200</lastBuildDate>
    <atom:link href="https://bgraf.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Study Notes – TLA⁺ Fairness</title>
      <link>https://bgraf.github.io/posts/2025/tla-fairness/</link>
      <pubDate>Sat, 04 Oct 2025 13:19:42 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/2025/tla-fairness/</guid>
      <description>&lt;p&gt;A TLA&lt;sup&gt;+&lt;/sup&gt; specification&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Spec == Init /\ [][Next]_vars&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;is a temporal logic formula that describes&#xA;one or more initial states (&lt;code&gt;Init&lt;/code&gt;) and how to derive a next state from a current state (&lt;code&gt;Next&lt;/code&gt;).&#xA;Besides these two components so-called &lt;em&gt;liveness&lt;/em&gt; properties like weak- or strong-fairness can be&#xA;added giving:&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Spec == Init /\ [][Next]_vars /\ Liveness&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;What are weak- and strong fairness?&lt;/p&gt;&#xA;&lt;h2 id=&#34;state-graph&#34;&gt;State Graph&lt;/h2&gt;&#xA;&lt;p&gt;Suppose we track the behaviors in a state graph. Each node corresponds to a unique state&#xA;and a directed edge (v,w) represents a valid step from state v to state w.&#xA;At each node there&amp;rsquo;s a stuttering self-loop that doesn&amp;rsquo;t change the state and could loop forever.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple Modeling of Concurrent Systems</title>
      <link>https://bgraf.github.io/posts/2025/simple-modeling/</link>
      <pubDate>Fri, 03 Oct 2025 00:50:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/2025/simple-modeling/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;ll model a simple distributed system twice: informally in Python tested by unit testing&#xA;and formally in TLA+ verified by model checking.&lt;/p&gt;&#xA;&lt;p&gt;Imagine a decade old system comprised of multiple independent subsystems like an ERP-system and some external services.&#xA;The system has been grown over a long time with changes now and then, but without a single person or team responsible to&#xA;keep a consistent vision. Also, the system is prone to various kinds of concurrency problems because considering&#xA;all of these special cases had been out of scope during development or had been simply overlooked.&#xA;These issues surface rarely enough to not create any immediate incentive to fix them.&#xA;In case an issue comes up, they are mitigated by human intervention.&#xA;Our job is to add new features to this system. In the best case also removing existing issues or&#xA;at least not adding any new ones.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typeface Matters</title>
      <link>https://bgraf.github.io/posts/2025/typeface-matters/</link>
      <pubDate>Sun, 07 Sep 2025 20:50:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/2025/typeface-matters/</guid>
      <description>&lt;p&gt;At work and at home I have used &lt;a href=&#34;https://logseq.com/&#34;&gt;logseq&lt;/a&gt; as my personal knowledge management system (PKMS) since some time in 2022.&#xA;Most of the time I just used it to store and browse script-generated documentation, for example of database schemas (SAP etc.).&#xA;Generated documentation pages are usually long lists of short texts, one to three words max.&#xA;A single page for each database table with a list of column names, their data types and short description.&#xA;Thus, my PKMS contained barely any text written in full paragraphs.&#xA;Despite the fact that I like writing and editing longer text, I wouldn&amp;rsquo;t have done that in logseq in the past.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Example: Branch &amp; Price for the GAP with SCIP</title>
      <link>https://bgraf.github.io/posts/bp-gap/</link>
      <pubDate>Sun, 06 Apr 2025 22:51:21 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/bp-gap/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been reading &lt;a href=&#34;https://optimizingwithcolumngeneration.github.io/&#34;&gt;&lt;em&gt;Optimizing with Column Generation&lt;/em&gt; (2024)&lt;/a&gt; by Uchoa, Pessoa &amp;amp; Moreno, a free (and work in progress) book on&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Column_generation&#34;&gt;&lt;em&gt;column generation&lt;/em&gt; (CG)&lt;/a&gt;.&#xA;In Chapter 4.4.1. they discuss the &lt;a href=&#34;https://en.wikipedia.org/wiki/Generalized_assignment_problem&#34;&gt;&lt;em&gt;Generalized Assignment Problem&lt;/em&gt; (GAP)&lt;/a&gt; and provide an example.&#xA;We will implement this example using the &lt;a href=&#34;https://pyscipopt.readthedocs.io/en/latest/&#34;&gt;&lt;em&gt;pyscipopt&lt;/em&gt;&lt;/a&gt; library.&#xA;&lt;em&gt;pyscipopt&lt;/em&gt; is a thin wrapper around &lt;a href=&#34;https://www.scipopt.org/&#34;&gt;SCIP&lt;/a&gt;, a solver library/executable for constraint integer programming&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-generalized-assignment-problem-gap&#34;&gt;The Generalized Assignment Problem (GAP)&lt;/h2&gt;&#xA;&lt;p&gt;In short the problem is as follows:&lt;/p&gt;&#xA;&lt;p&gt;Let \(J = \{1,\ldots, n\}\) be a set of jobs and \(K = \{1,\ldots,m\}\) a set of machines with&#xA;maximum capacity \(W_k\) for a machine \(k \in K\).&#xA;Running job \(j \in J\) on machine \(k \in K\) consumes \(l^k_j \in \mathbb{N_+}\) capacity&#xA;and incurs cost \(c^k_j \in \mathbb{N_+}\).&#xA;Find a minimum cost assignment \(s: J \rightarrow K\) such that no machine&#xA;capacity is exceeded.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gomory-Hu Trees and Gusfield&#39;s algorithm</title>
      <link>https://bgraf.github.io/posts/gomory-hu/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/gomory-hu/</guid>
      <description>&lt;p&gt;When I need to calculate all minimum \(s\)-\(t\) cuts in an undirected (and possibly weighted) graph&#xA;(&lt;a href=&#34;https://bgraf.github.io/posts/tsp-user-cuts/&#34;&gt;for example to implement TSP cuts&lt;/a&gt;) I used&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gomory%E2%80%93Hu_tree&#34;&gt;Gomory-Hu Trees&lt;/a&gt;.&#xA;I never looked at the actual algorithm, so here are some properties of Gomory-Hu trees and the commented algorithm&#xA;in python for future reference.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-gomory-hu-tree&#34;&gt;What is a Gomory-Hu tree?&lt;/h2&gt;&#xA;&lt;p&gt;Given an undirected connected graph \(G\) with edge capacities, a Gomory-Hu tree \(T\)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Has the same vertex set as \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Has weighted edges which are unrelated to the edges of \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t unique: there could be multiple distinct trees to represent the same information.&#xA;Multiple distinct trees indicate multiple distinct minimum cuts.&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t rooted or can be rooted at any node.&lt;/li&gt;&#xA;&lt;li&gt;The tree represents all minimum \(s\)-\(t\) cuts of \(G\).&#xA;For any two nodes \(s, t \in V(G)\) let \(e\) be the minimum weight edge on the unique path between \(s\) and \(t\) in \(T\).&#xA;Then the weight of \(e\) corresponds to the maximum flow between \(s\) and \(t\) and the two connected components of \(T\) generated by&#xA;removing edge \(e\) correspond the minimum cut, i.e., the source and the sink side node sets.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Illustration&lt;/strong&gt;:&#xA;The tree is like a set of islands connected by bridges.&#xA;The smallest bridge on any path determines the maximum size of a vehicle to make the trip.&#xA;&lt;figure&gt;&lt;img src=&#34;https://bgraf.github.io/posts/gomory-hu/bridges.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Joy of Python with Type Hints</title>
      <link>https://bgraf.github.io/posts/joy-of-typing-python/</link>
      <pubDate>Fri, 14 Mar 2025 18:35:00 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/joy-of-typing-python/</guid>
      <description>&lt;p&gt;In 2011–2017 I used Python regularly but not daily to drive small tasks and orchestration of larger programs.&#xA;Moving around files, creating directories, extracting data from HTML pages and so on.&#xA;In my case regular use was spread out wide enough that I always needed to lookup the docs again.&#xA;Thus Python seemed a bit like a necessary evil, I did not like working with it, but alternatives like bash or perl were even worse.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TSP subtour elimination II - User Cut Callbacks</title>
      <link>https://bgraf.github.io/posts/tsp-user-cuts/</link>
      <pubDate>Tue, 29 Oct 2024 00:00:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/tsp-user-cuts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/&#34;&gt;In an earlier post&lt;/a&gt; I demoed the lazy constraint callback of ORTools&amp;rsquo; &lt;code&gt;math_opt&lt;/code&gt; module&#xA;to generate subtour elimination constraints for the TSP.&#xA;Coded in Python the process to solve a single instance took around 65 seconds. I wondered what the runtime of the same algorithm and instance would be if instead of python,&#xA;we&amp;rsquo;d use the C++ ORTools library. In the next few paragraphs we will reduce the runtime from 65 to 12 seconds by using&lt;/p&gt;</description>
    </item>
    <item>
      <title>TSP subtour elimination with lazy constraint callbacks in ORTools</title>
      <link>https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/</link>
      <pubDate>Fri, 27 Sep 2024 22:13:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/</guid>
      <description>&lt;p&gt;Most MIP solver software packages support the concept of &lt;em&gt;callbacks&lt;/em&gt; to interact with the solver during the solution process.&#xA;Callbacks can be used to track the process, terminate early, generate user cuts to tighten the bounds on relaxed problems,&#xA;take branching decisions and in case of the &lt;em&gt;lazy constraint callback&lt;/em&gt; generate constraints on the fly.&lt;/p&gt;&#xA;&lt;p&gt;Generating constraints during the solution process makes sense when&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;the number of constraints is relatively large (e.g. exponentially) so adding them all upfront would take too much time and&lt;/li&gt;&#xA;&lt;li&gt;the number of constraints required to reach an integer optimal solution for a given instance is relatively small compared to the total number of constraints.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;So, the solution process is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a personal Anki synchronization server</title>
      <link>https://bgraf.github.io/posts/setup-anki-sync-server/</link>
      <pubDate>Wed, 14 Dec 2022 14:50:04 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/setup-anki-sync-server/</guid>
      <description>&lt;blockquote class=&#34;warning&#34;&gt;&lt;p&gt;2024-09-22: The setup described below is &lt;strong&gt;outdated&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The spaced-repetition software Anki is supported by a centralized service allowing users to synchronize their flashcards between different devices and apps (desktops, mobile phones, etc.). The default service is called Ankiweb and free to use, but lacks encryption and should be used with care when cards contain confidential data. In this article I describe how to setup your personal synchronization server and show why it&amp;rsquo;s more complex than it would need to be.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
