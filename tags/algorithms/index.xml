<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on bg</title>
    <link>https://bgraf.github.io/tags/algorithms/</link>
    <description>Recent content in Algorithms on bg</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© bg 2024</copyright>
    <lastBuildDate>Sun, 06 Apr 2025 22:51:21 +0200</lastBuildDate>
    <atom:link href="https://bgraf.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Example: Branch &amp; Price for the GAP with SCIP</title>
      <link>https://bgraf.github.io/posts/bp-gap/</link>
      <pubDate>Sun, 06 Apr 2025 22:51:21 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/bp-gap/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been reading &lt;a href=&#34;https://optimizingwithcolumngeneration.github.io/&#34;&gt;&lt;em&gt;Optimizing with Column Generation&lt;/em&gt; (2024)&lt;/a&gt; by Uchoa, Pessoa &amp;amp; Moreno, a free (and work in progress) book on&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Column_generation&#34;&gt;&lt;em&gt;column generation&lt;/em&gt; (CG)&lt;/a&gt;.&#xA;In Chapter 4.4.1. they discuss the &lt;a href=&#34;https://en.wikipedia.org/wiki/Generalized_assignment_problem&#34;&gt;&lt;em&gt;Generalized Assignment Problem&lt;/em&gt; (GAP)&lt;/a&gt; and provide an example.&#xA;We will implement this example using the &lt;a href=&#34;https://pyscipopt.readthedocs.io/en/latest/&#34;&gt;&lt;em&gt;pyscipopt&lt;/em&gt;&lt;/a&gt; library.&#xA;&lt;em&gt;pyscipopt&lt;/em&gt; is a thin wrapper around &lt;a href=&#34;https://www.scipopt.org/&#34;&gt;SCIP&lt;/a&gt;, a solver library/executable for constraint integer programming&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-generalized-assignment-problem-gap&#34;&gt;The Generalized Assignment Problem (GAP)&lt;/h2&gt;&#xA;&lt;p&gt;In short the problem is as follows:&lt;/p&gt;&#xA;&lt;p&gt;Let \(J = \{1,\ldots, n\}\) be a set of jobs and \(K = \{1,\ldots,m\}\) a set of machines with&#xA;maximum capacity \(W_k\) for a machine \(k \in K\).&#xA;Running job \(j \in J\) on machine \(k \in K\) consumes \(l^k_j \in \mathbb{N_+}\) capacity&#xA;and incurs cost \(c^k_j \in \mathbb{N_+}\).&#xA;Find a minimum cost assignment \(s: J \rightarrow K\) such that no machine&#xA;capacity is exceeded.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gomory-Hu Trees and Gusfield&#39;s algorithm</title>
      <link>https://bgraf.github.io/posts/gomory-hu/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/gomory-hu/</guid>
      <description>&lt;p&gt;When I need to calculate all minimum \(s\)-\(t\) cuts in an undirected (and possibly weighted) graph&#xA;(&lt;a href=&#34;https://bgraf.github.io/posts/tsp-user-cuts/&#34;&gt;for example to implement TSP cuts&lt;/a&gt;) I used&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gomory%E2%80%93Hu_tree&#34;&gt;Gomory-Hu Trees&lt;/a&gt;.&#xA;I never looked at the actual algorithm, so here are some properties of Gomory-Hu trees and the commented algorithm&#xA;in python for future reference.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-gomory-hu-tree&#34;&gt;What is a Gomory-Hu tree?&lt;/h2&gt;&#xA;&lt;p&gt;Given an undirected connected graph \(G\) with edge capacities, a Gomory-Hu tree \(T\)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Has the same vertex set as \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Has weighted edges which are unrelated to the edges of \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t unique: there could be multiple distinct trees to represent the same information.&#xA;Multiple distinct trees indicate multiple distinct minimum cuts.&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t rooted or can be rooted at any node.&lt;/li&gt;&#xA;&lt;li&gt;The tree represents all minimum \(s\)-\(t\) cuts of \(G\).&#xA;For any two nodes \(s, t \in V(G)\) let \(e\) be the minimum weight edge on the unique path between \(s\) and \(t\) in \(T\).&#xA;Then the weight of \(e\) corresponds to the maximum flow between \(s\) and \(t\) and the two connected components of \(T\) generated by&#xA;removing edge \(e\) correspond the minimum cut, i.e., the source and the sink side node sets.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Illustration&lt;/strong&gt;:&#xA;The tree is like a set of islands connected by bridges.&#xA;The smallest bridge on any path determines the maximum size of a vehicle to make the trip.&#xA;&lt;figure&gt;&lt;img src=&#34;https://bgraf.github.io/posts/gomory-hu/bridges.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
