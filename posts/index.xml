<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bg</title>
    <link>https://bgraf.github.io/posts/</link>
    <description>Recent content in Posts on bg</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© bg 2024</copyright>
    <lastBuildDate>Sun, 23 Mar 2025 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://bgraf.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gomory-Hu Trees and Gusfield&#39;s algorithm</title>
      <link>https://bgraf.github.io/posts/gomory-hu/</link>
      <pubDate>Sun, 23 Mar 2025 00:00:00 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/gomory-hu/</guid>
      <description>&lt;p&gt;When I need to calculate all minimum \(s\)-\(t\) cuts in an undirected (and possibly weighted) graph&#xA;(&lt;a href=&#34;https://bgraf.github.io/posts/tsp-user-cuts/&#34;&gt;for example to implement TSP cuts&lt;/a&gt;) I used&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gomory%E2%80%93Hu_tree&#34;&gt;Gomory-Hu Trees&lt;/a&gt;.&#xA;I never looked at the actual algorithm, so here are some properties of Gomory-Hu trees and the commented algorithm&#xA;in python for future reference.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-gomory-hu-tree&#34;&gt;What is a Gomory-Hu tree?&lt;/h2&gt;&#xA;&lt;p&gt;Given an undirected connected graph \(G\) with edge capacities, a Gomory-Hu tree \(T\)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Has the same vertex set as \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Has weighted edges which are unrelated to the edges of \(G\).&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t unique: there could be multiple distinct trees to represent the same information.&#xA;Multiple distinct trees indicate multiple distinct minimum cuts.&lt;/li&gt;&#xA;&lt;li&gt;Isn&amp;rsquo;t rooted or can be rooted at any node.&lt;/li&gt;&#xA;&lt;li&gt;The tree represents all minimum \(s\)-\(t\) cuts of \(G\).&#xA;For any two nodes \(s, t \in V(G)\) let \(e\) be the minimum weight edge on the unique path between \(s\) and \(t\) in \(T\).&#xA;Then the weight of \(e\) corresponds to the maximum flow between \(s\) and \(t\) and the two connected components of \(T\) generated by&#xA;removing edge \(e\) correspond the minimum cut, i.e., the source and the sink side node sets.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Illustration&lt;/strong&gt;:&#xA;The tree is like a set of islands connected by bridges.&#xA;The smallest bridge on any path determines the maximum size of a vehicle to make the trip.&#xA;&lt;figure&gt;&lt;img src=&#34;https://bgraf.github.io/posts/gomory-hu/bridges.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Joy of Python with Type Hints</title>
      <link>https://bgraf.github.io/posts/joy-of-typing-python/</link>
      <pubDate>Fri, 14 Mar 2025 18:35:00 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/joy-of-typing-python/</guid>
      <description>&lt;p&gt;In 2011–2017 I used Python regularly but not daily to drive small tasks and orchestration of larger programs.&#xA;Moving around files, creating directories, extracting data from HTML pages and so on.&#xA;In my case regular use was spread out wide enough that I always needed to lookup the docs again.&#xA;Thus Python seemed a bit like a necessary evil, I did not like working with it, but alternatives like bash or perl were even worse.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TSP subtour elimination II - User Cut Callbacks</title>
      <link>https://bgraf.github.io/posts/tsp-user-cuts/</link>
      <pubDate>Tue, 29 Oct 2024 00:00:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/tsp-user-cuts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/&#34;&gt;In an earlier post&lt;/a&gt; I demoed the lazy constraint callback of ORTools&amp;rsquo; &lt;code&gt;math_opt&lt;/code&gt; module&#xA;to generate subtour elimination constraints for the TSP.&#xA;Coded in Python the process to solve a single instance took around 65 seconds. I wondered what the runtime of the same algorithm and instance would be if instead of python,&#xA;we&amp;rsquo;d use the C++ ORTools library. In the next few paragraphs we will reduce the runtime from 65 to 12 seconds by using&lt;/p&gt;</description>
    </item>
    <item>
      <title>TSP subtour elimination with lazy constraint callbacks in ORTools</title>
      <link>https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/</link>
      <pubDate>Fri, 27 Sep 2024 22:13:00 +0200</pubDate>
      <guid>https://bgraf.github.io/posts/ortools-lazy-constraint-callbacks-tsp/</guid>
      <description>&lt;p&gt;Most MIP solver software packages support the concept of &lt;em&gt;callbacks&lt;/em&gt; to interact with the solver during the solution process.&#xA;Callbacks can be used to track the process, terminate early, generate user cuts to tighten the bounds on relaxed problems,&#xA;take branching decisions and in case of the &lt;em&gt;lazy constraint callback&lt;/em&gt; generate constraints on the fly.&lt;/p&gt;&#xA;&lt;p&gt;Generating constraints during the solution process makes sense when&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;the number of constraints is relatively large (e.g. exponentially) so adding them all upfront would take too much time and&lt;/li&gt;&#xA;&lt;li&gt;the number of constraints required to reach an integer optimal solution for a given instance is relatively small compared to the total number of constraints.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;So, the solution process is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a personal Anki synchronization server</title>
      <link>https://bgraf.github.io/posts/setup-anki-sync-server/</link>
      <pubDate>Wed, 14 Dec 2022 14:50:04 +0100</pubDate>
      <guid>https://bgraf.github.io/posts/setup-anki-sync-server/</guid>
      <description>&lt;blockquote class=&#34;warning&#34;&gt;&lt;p&gt;2024-09-22: The setup described below is &lt;strong&gt;outdated&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The spaced-repetition software Anki is supported by a centralized service allowing users to synchronize their flashcards between different devices and apps (desktops, mobile phones, etc.). The default service is called Ankiweb and free to use, but lacks encryption and should be used with care when cards contain confidential data. In this article I describe how to setup your personal synchronization server and show why it&amp;rsquo;s more complex than it would need to be.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
